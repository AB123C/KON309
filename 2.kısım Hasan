#include "stm32f10x.h"
#include "delay.h"

	
	int state = 0;
 	int counter = 0;
 	
	GPIO_InitTypeDef GPIO_InitStructure; 
	EXTI_InitTypeDef EXTI_InitStructure; 
	NVIC_InitTypeDef NVIC_InitStructure;
	TIM_TimeBaseInitTypeDef TIM_BaseStructure;
	
void TIM2_IRQHandler()
{
	if(TIM_GetITStatus(TIM2, TIM_IT_Update | TIM_IT_CC1) == SET) // Check for timer interrupt status
		{ 
			counter = counter++;
			TIM_ClearITPendingBit(TIM2, TIM_IT_Update | TIM_IT_CC1); // Clear the TIM interrupt pending bits
		}
}

	
		void EXTI0_IRQHandler(void)
	{
		if(EXTI_GetITStatus(EXTI_Line0) != RESET)
		{	
			
			if (counter <= 100 && state == 2)
			{
				counter = 100;
			}
			
		}
	 
	}
int main(void)
{
	
	
	// Enable clocks PortA (for button) and AFIO (for exti)
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
	// Enable clock for Timer 2
 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
	// Configure EXTI line (PA0)
	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
	// Configure external interrupt
	EXTI_DeInit();
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);
	// Configure time base generation
	TIM_TimeBaseStructure.TIM_Period = 49999;
	TIM_TimeBaseStructure.TIM_Prescaler = 143;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_2->CR1  |= TIM_CR1_URS;
	TIM2->DIER |= TIM_DIER_UIE;
	TIM2->EGR |= TIM_EGR_UG;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
	// Enable interrupts
	TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
	// Enable timer 2
	TIM_Cmd(TIM2, ENABLE);	
	// Configure nested vector interrupt controller (for timer2)
	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	// Configure nested vector interrupt controller (for external interrupt)
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
	// Configure button as pull down connected to PA0
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	// Configure external LED connected to PA5 (L1Red)
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	 // Configure external LED connected to PA6 (L1Yellow)
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	 // Configure external LED connected to PA7 (L1Green)
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	// Configure external LED connected to PA8 (L2Red)
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	// Configure external LED connected to PA9 (L2Green)
 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 	
 	TIM2_IRQHandler();
 	EXTI0_IRQHandler();
	delayInit();

	while(1)
		{
			switch(state)
			{
				case(0):
					GPIO_ResetBits(GPIOA, GPIO_Pin_5);
					GPIO_ResetBits(GPIOA, GPIO_Pin_6);
					GPIO_ResetBits(GPIOA, GPIO_Pin_7);
					GPIO_ResetBits(GPIOA, GPIO_Pin_8);
					do
					{
						GPIO_SetBits(GPIOA, GPIO_Pin_5);
						GPIO_SetBits(GPIOA, GPIO_Pin_9);
					}
					while(counter <= 49);
					state = 1;
					break;
				
				case(1):
					GPIO_ResetBits(GPIOA, GPIO_Pin_5);
					GPIO_ResetBits(GPIOA, GPIO_Pin_9);
					do
					{
						GPIO_SetBits(GPIOA, GPIO_Pin_6);
						GPIO_SetBits(GPIOA, GPIO_Pin_8);
					}
					while(counter <= 69);
					state = 2;
					break;
			
				case(2):
					GPIO_ResetBits(GPIOA, GPIO_Pin_6);
					do
					{
					GPIO_SetBits(GPIOA, GPIO_Pin_7);
					GPIO_SetBits(GPIOA, GPIO_Pin_8);
					}
				
					while(counter <= 119);
					state = 3;
					break;
				
				case(3):
					GPIO_ResetBits(GPIOA, GPIO_Pin_7);
					do
					{
					GPIO_SetBits(GPIOA, GPIO_Pin_6);
					GPIO_SetBits(GPIOA, GPIO_Pin_8);
					}
				
					while(counter <= 139);
					counter = 0;
					state = 0;
					break;
				
			}
		} 	
}
